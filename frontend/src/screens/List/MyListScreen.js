import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, FlatList, Modal, TextInput, TouchableOpacity, Button, Alert, Image, StyleSheet } from 'react-native'; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ StyleSheet ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation, useRoute, useFocusEffect } from '@react-navigation/native';
import ListItem from '../../components/ListItem';
import * as ImagePicker from 'expo-image-picker';

const MyListScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const [myLists, setMyLists] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å AsyncStorage ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const [selectedItem, setSelectedItem] = useState(null); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [modalVisible, setModalVisible] = useState(false); // ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Modal
  const [form, setForm] = useState({ title: '', image: '' }); // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Modal

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô AsyncStorage
  const loadSavedList = async () => {
    try {
      const data = await AsyncStorage.getItem('savedList');
      if (data) {
        const parsedData = JSON.parse(data);
        if (Array.isArray(parsedData)) {
          setMyLists(parsedData);
        } else {
          console.warn('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• savedList ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
        }
      }
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á AsyncStorage
  const saveListToStorage = async (updatedList) => {
    try {
      await AsyncStorage.setItem('savedList', JSON.stringify(updatedList));
      setMyLists(updatedList);
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  };

  useFocusEffect(
    React.useCallback(() => {
      const loadLists = async () => {
        const storedLists = await AsyncStorage.getItem('savedList');
        setLists(storedLists ? JSON.parse(storedLists) : []);
      };
      loadLists();
    }, [])
  );

  useEffect(() => {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å AsyncStorage
    loadSavedList();
  }, []);
  
  useEffect(() => {
    if (route.params?.newItem) {
      const newItem = route.params.newItem; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ DetailScreen
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡πä‡∏Ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏•‡∏á‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      const updatedList = [...myLists, newItem];
      saveListToStorage(updatedList); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡∏á‡πÉ‡∏ô AsyncStorage
    }
  }, [route.params?.newItem]); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ newItem ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
  

  const deleteItem = (index) => {
    Alert.alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?", [
      { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
      { text: "‡∏•‡∏ö", onPress: () => {
          const updatedList = myLists.filter((_, i) => i !== index);
          saveListToStorage(updatedList);
        }
      }
    ]);
  };

  const editItem = (index) => {
    const itemToEdit = myLists[index];
    if (itemToEdit) {
      setSelectedItem({ index, ...itemToEdit });
      setForm({ ...itemToEdit }); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ form ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      setModalVisible(true);
    }
  };

  const saveEdit = () => {
    const updatedList = [...myLists];
    const updatedItem = { ...selectedItem, ...form }; // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô selectedItem ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å form
    updatedList[selectedItem.index] = updatedItem;
    saveListToStorage(updatedList);
    setModalVisible(false); // ‡∏õ‡∏¥‡∏î Modal
  };

  const handleItemPress = (item) => {
    navigation.navigate('DetailListScreen', { item });
  };
  
  const toggleBookmark = (index) => {
    const updatedList = [...myLists];
    const itemToUpdate = updatedList[index];
    itemToUpdate.isBookmarked = !itemToUpdate.isBookmarked; // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏∏‡πä‡∏Ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ
    saveListToStorage(updatedList);
  };

  const pickImage = async () => {
    // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });
  
    if (!result.canceled) {
      setForm((prev) => ({ ...prev, image: result.assets[0].uri }));
    }
  };

  
  return (
    <View style={styles.container}>
      {myLists.length === 0 ? (
        <Text style={styles.emptyText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Text>
      ) : (
        <FlatList
          data={myLists}
          keyExtractor={(item, index) => index.toString()}
          numColumns={2}
          columnWrapperStyle={{ justifyContent: 'space-between', paddingHorizontal: 5 }}
          renderItem={({ item, index }) => (
          <View style={styles.itemContainer}>
            <ListItem 
              item={item} 
              index={index} 
              onEdit={editItem} 
              onDelete={deleteItem} 
              onPress={() => handleItemPress(item)}
            />
            {/* <TouchableOpacity onPress={() => toggleBookmark(index)} style={styles.bookmarkButton}>
                <Text style={styles.bookmarkText}>{item.isBookmarked ? '‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏∏‡πä‡∏Ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ö‡∏∏‡πä‡∏Ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ'}</Text>
              </TouchableOpacity> */}
            </View>
          )}
        />
      )}

<Modal visible={modalVisible} transparent={true} animationType="slide">
  <View style={styles.modalContent}>
    {/* ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ */}
    <TextInput
      style={styles.input}
      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
      value={form.title}
      onChangeText={(text) => setForm((prev) => ({ ...prev, title: text }))} // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    />

    {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
    <TouchableOpacity onPress={pickImage} style={styles.input}>
      <Text style={styles.buttonText}>üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà</Text>
    </TouchableOpacity>

    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
    {form.image ? <Image source={{ uri: form.image }} style={styles.imagePreview} /> : null}

    <View style={styles.modalButtonRow}>
      <Button title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" onPress={() => setModalVisible(false)} />
      <Button title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" onPress={saveEdit} />
    </View>
  </View>
</Modal>

    </View>
  );
};

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#111', 
  },
  emptyText: { 
    textAlign: 'center', 
    marginTop: 20, 
    fontSize: 16, color: 'gray' 
  },
  modalContent: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.8)",
    padding: 20,
  },
  input: {
    width: "80%",
    backgroundColor: "white",
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  textArea: {
    height: 100,
  },
  label: {
    fontWeight: 'bold',
  },
  starContainer: {
    flexDirection: 'row',
    marginVertical: 10,
  },
  checkboxGroup: {
    marginTop: 20,
  },
  labelCat: {
    fontWeight: 'bold',
  },
  checkboxRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 10,
  },
  checkbox: {
    fontSize: 20,
  },
  checkboxText: {
    marginLeft: 5,
  },
  buttonText: {
    color: "#1a1a1a",
  },
  imagePreview: {
    width: 100,
    height: 100,
    marginTop: 10,
  },
  modalButtonRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "80%",
  }
});

export default MyListScreen;